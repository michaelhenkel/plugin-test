package main

import "fmt"
import "plugin"
//import "strings"
import "encoding/json"
import "os"


func main() {
	fmt.Println("hello")
	callApi("foo","create",`{"Name":"foo1","Properties":{"key3":"value3"},"References":{"key4":"value4"}}`)
}

type ApiList struct {
	Endpoints []string
}

type IntentResource interface {
    CreateObj(map[string]interface{}) map[string]interface{}
}

func callApi(apiEndpoint string, action string, rawData string){
	jsonData := []byte(rawData)
	var data interface{}
	err := json.Unmarshal(jsonData, &data)
	if err != nil {
		fmt.Println(err)
	}
	apiList := createApiEndpoint()
	irObj := apiList[apiEndpoint]
	ir := irObj.(IntentResource)
	fmt.Println("bla")
	fmt.Println(ir)
	switch action {
	case "create":
		result := ir.CreateObj(data.(map[string]interface{}))
		fmt.Printf("\tResult: %s\n",result)
	}
}

func createApiEndpoint() map[string]plugin.Symbol{
	// example of IRDs in the DB:
        IntentResourceList := []string{"foo"}
	apiList := make(map[string]plugin.Symbol)
	for _, intentResource := range IntentResourceList{
		symbol := loadPlugin(intentResource,intentResource)
		apiList[fmt.Sprintf(intentResource)] = symbol
	}
	return apiList
}

func loadPlugin(path string, intentResourceName string) plugin.Symbol {
	ird := fmt.Sprintf("%s/%s.so", path, intentResourceName)
	irdPlugin, err := plugin.Open(ird)
	if err != nil {
                fmt.Println(err)
                os.Exit(1)
        } else {
		fmt.Printf("loaded Plugin %s\n", intentResourceName)
	}
	IntentResourceInterface, err := irdPlugin.Lookup("IntentResourceInterface")
	if err != nil {
		panic(err)
        } else {
		fmt.Printf("loaded Symbol IntentResource\n")
	}
	intentResourceInterface, err := IntentResourceInterface.(func(string) (interface{}, error))("bla")
	return intentResourceInterface
}
