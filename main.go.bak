package main

import "fmt"
import "plugin"
import "strings"
import "encoding/json"
import "os"

type IntentResource struct {
	Data map[string]interface{}
}

func main() {
	fmt.Println("hello")
	// This is a set of API calls coming from northbound
	callApi("foo","create",`{"Name":"foo1","Properties":{"key3":"value3"}}`)
	//callApi("bar","create",`{"Name":"bar1","Properties":{"key3":"value3"}}`)
	//callApi("bar","delete",`{"Name":"bar1","Properties":{"key3":"value3"}}`)
	callApi("foo","update",`{"Name":"foo1","Properties":{"key3":"value3"}}`)
}

func callApi(apiEndpoint string, action string, rawData string){
	jsonData := []byte(rawData)
	var data interface{}
	err := json.Unmarshal(jsonData, &data)
	if err != nil {
		fmt.Println(err)
	}
	ir := createObject(data.(map[string]interface{}))
	apiList, apiList2 := createApiList()
	fmt.Println(apiList2)
	obj := apiList[action + apiEndpoint]
	obj(ir)
	obj2 := apiList2[action + apiEndpoint]
	fmt.Println(obj2)
}

func createApiList() (map[string]func(*IntentResource),map[string]plugin.Symbol) {
	// example of IRDs in the DB:
	IntentResourceList := []string{"foo"}
	apiList := make(map[string]func(*IntentResource))
	apiList2 := make(map[string]plugin.Symbol)
	for _, intentResource := range IntentResourceList{
		symbol := loadPlugin(intentResource,intentResource)
		apiList[fmt.Sprintf("create%s",intentResource)] = (*IntentResource).create
		apiList[fmt.Sprintf("read%s",intentResource)] = (*IntentResource).read
		apiList[fmt.Sprintf("update%s",intentResource)] = (*IntentResource).update
		apiList[fmt.Sprintf("delete%s",intentResource)] = (*IntentResource).delete

		apiList2[fmt.Sprintf("create%s",intentResource)] = symbol
	}
	return apiList, apiList2
}

func createObject(data map[string]interface{}) *IntentResource{
	intentResource := &IntentResource{
		Data: data,
	}
	return intentResource
}

func (ir *IntentResource) create() {
	intentResource := *ir
	intentResourceName := intentResource.Data["Name"]
	fmt.Printf("creating the intent resource %s\n", intentResourceName)
	//create the IR
}

func (ir *IntentResource) read() {
	intentResource := *ir
	intentResourceName := intentResource.Data["Name"]
	fmt.Printf("reading the intent resource %s\n", intentResourceName)
	//read the IR
}

func (ir *IntentResource) update() {
	intentResource := *ir
	intentResourceName := intentResource.Data["Name"]
	fmt.Printf("updating the intent resource %s\n", intentResourceName)
	//update the IR
}

func (ir *IntentResource) delete() {
	intentResource := *ir
	intentResourceName := intentResource.Data["Name"]
	fmt.Printf("deleting the intent resource %s\n", intentResourceName)
	//delete the IR
}

func loadPlugin(path string, intentResourceName string) plugin.Symbol {
	ird := fmt.Sprintf("%s/%s.so", path, intentResourceName)
	irdPlugin, err := plugin.Open(ird)
	if err != nil {
                fmt.Println(err)
                os.Exit(1)
        } else {
		fmt.Printf("loaded Plugin %s\n", intentResourceName)
	}
	irdSymbol, err := irdPlugin.Lookup(strings.Title(intentResourceName))
	if err != nil {
                fmt.Println(err)
                os.Exit(1)
        } else {
		fmt.Printf("loaded Symbol %s\n", strings.Title(intentResourceName))
	}

	return irdSymbol
}
/*

mod = "./chi/chi.so"
plug, err := plugin.Open(mod)

	symGreeter, err := plug.Lookup("Greeter")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	// 3. Assert that loaded symbol is of a desired type
	// in this case interface type Greeter (defined above)
	var greeter Greeter
	greeter, ok := symGreeter.(Greeter)
	if !ok {
		fmt.Println("unexpected type from module symbol")
		os.Exit(1)
	}

	// 4. use the module
	greeter.Greet()
*/
