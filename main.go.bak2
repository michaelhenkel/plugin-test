package main

import "fmt"
import "plugin"
//import "strings"
import "encoding/json"
import "os"

type IntentResourceData struct{
        Data map[string]interface{}
}

type IntentResource interface {
	CreateObject(map[string]interface{}) *IntentResourceData
	Create()
	Read()
	Update()
	Delete()
}

func main() {
	fmt.Println("hello")
	callApi("foo","create",`{"Name":"foo1","Properties":{"key3":"value3"},"References":{"key4":"value4"}}`)
	//callApi("bar","create",`{"Name":"bar1","Properties":{"key3":"value3"},"References":{"key4":"value4"}}`)
}

func callApi(apiEndpoint string, action string, rawData string){
	jsonData := []byte(rawData)
	var data interface{}
	err := json.Unmarshal(jsonData, &data)
	if err != nil {
		fmt.Println(err)
	}
	apiList := createApiEndpoint()
	fmt.Println(apiList)
	obj := apiList[apiEndpoint]
	fmt.Println("object")
	fmt.Println(obj)
	intentResourceData := &IntentResourceData{
		Data: data.(map[string]interface{}),
	}
	fmt.Println(intentResourceData)
	var ir IntentResource
	ir, _ = obj.(IntentResource)
	fmt.Println(ir)
	bla := ir.CreateObject(data.(map[string]interface{}))
	fmt.Println(bla)
	ir.Create()
}

func createApiEndpoint() map[string]plugin.Symbol{
	// example of IRDs in the DB:
        IntentResourceList := []string{"foo"}
	apiList := make(map[string]plugin.Symbol)
	for _, intentResource := range IntentResourceList{
		symbol := loadPlugin(intentResource,intentResource)
		apiList[fmt.Sprintf(intentResource)] = symbol
	}
	return apiList
}

func loadPlugin(path string, intentResourceName string) plugin.Symbol {
	ird := fmt.Sprintf("%s/%s.so", path, intentResourceName)
	irdPlugin, err := plugin.Open(ird)
	if err != nil {
                fmt.Println(err)
                os.Exit(1)
        } else {
		fmt.Printf("loaded Plugin %s\n", intentResourceName)
	}
	irdSymbol, err := irdPlugin.Lookup("IntentResource")
	if err != nil {
                fmt.Println(err)
                os.Exit(1)
        } else {
		fmt.Printf("loaded Symbol IntentResource\n")
	}

	return irdSymbol
}
/*

mod = "./chi/chi.so"
plug, err := plugin.Open(mod)

	symGreeter, err := plug.Lookup("Greeter")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	// 3. Assert that loaded symbol is of a desired type
	// in this case interface type Greeter (defined above)
	var greeter Greeter
	greeter, ok := symGreeter.(Greeter)
	if !ok {
		fmt.Println("unexpected type from module symbol")
		os.Exit(1)
	}

	// 4. use the module
	greeter.Greet()
*/
